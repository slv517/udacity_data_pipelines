from datetime import datetime, timedelta
import os
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators import (StageToRedshiftOperator, LoadFactOperator,
                                LoadDimensionOperator, DataQualityOperator)
from helpers import SqlQueries

# AWS_KEY = os.environ.get('AWS_KEY')
# AWS_SECRET = os.environ.get('AWS_SECRET')


# Creating the DAG
# Knowledge reference - https://knowledge.udacity.com/questions/507576
# Knowledge reference - https://knowledge.udacity.com/questions/674482
default_args = {
    'owner': 'udacity',
    'start_date': datetime(2019, 1, 12),
    'depends_on_past': False,
    'retries': 3,
    'retry_delay': timedelta(minutes=5),
    'email_on_retry': False,
    'catchup': False
}

dag = DAG('udac_example_dag',
          default_args=default_args,
          description='Load and transform data in Redshift with Airflow',
          schedule_interval='0 * * * *'
        )


start_operator = DummyOperator(task_id='Begin_execution',  dag=dag)


# Knowledge reference - https://knowledge.udacity.com/questions/556140
# Knowledge reference - https://knowledge.udacity.com/questions/512330
stage_events_to_redshift = StageToRedshiftOperator(
    task_id='Stage_events',
    dag=dag,
    redshift_conn_id='redshift',
    aws_credentials_id='aws_credentials',
    table='staging_events',
    s3_bucket='udacity-dend',
    s3_key='log_data',
    s3_data_format='s3://udacity-dend/log_json_path.json',
    region='us-west-2',
)

stage_songs_to_redshift = StageToRedshiftOperator(
    task_id='Stage_songs',
    dag=dag,
    redshift_conn_id='redshift',
    aws_credentials_id='aws_credentials',
    table='staging_songs',
    s3_bucket='udacity-dend',
    s3_key='song_data',
    s3_data_format='auto',
    region='us-west-2'
)

# Loading the tables
# Knowledge reference - https://knowledge.udacity.com/questions/512330
load_songplays_table = LoadFactOperator(
    task_id='Load_songplays_fact_table',
    dag=dag,
    target_table='songplays',
    sql=SqlQueries.songplay_table_insert,
    redshift_conn_id='redshift'
)

# Knowledge reference - https://knowledge.udacity.com/questions/512330
load_user_dimension_table = LoadDimensionOperator(
    task_id='Load_user_dim_table',
    dag=dag,
    target_table='users',
    sql=SqlQueries.user_table_insert,
    redshift_conn_id='redshift'
)

# Knowledge reference - https://knowledge.udacity.com/questions/512330
load_song_dimension_table = LoadDimensionOperator(
    task_id='Load_song_dim_table',
    dag=dag,
    target_table='songs',
    sql=SqlQueries.song_table_insert,
    redshift_conn_id='redshift'
)

# Knowledge reference - https://knowledge.udacity.com/questions/512330
load_artist_dimension_table = LoadDimensionOperator(
    task_id='Load_artist_dim_table',
    dag=dag,
    target_table='artists',
    sql=SqlQueries.artist_table_insert,
    redshift_conn_id='redshift'
)

# Knowledge reference - https://knowledge.udacity.com/questions/512330
load_time_dimension_table = LoadDimensionOperator(
    task_id='Load_time_dim_table',
    dag=dag,
    target_table='time',
    sql=SqlQueries.time_table_insert,
    redshift_conn_id='redshift'
)


# Data Quality checks
# Knowledge reference - https://knowledge.udacity.com/questions/631168
# Knowledge reference - https://knowledge.udacity.com/questions/512330
# Knowledge reference - https://knowledge.udacity.com/questions/54406
dq_checks=[
        {'check_sql': "SELECT COUNT(*) FROM users WHERE userid is null", 'expected_result': 0},
        {'check_sql': "SELECT COUNT(*) FROM songs WHERE songid is null", 'expected_result': 0},
        {'check_sql': "SELECT COUNT(*) FROM artists WHERE artistid IS NULL", 'expected_result': 0},
        {'check_sql': "SELECT COUNT(*) FROM time WHERE start_time IS NULL", 'expected_result': 0}
    ]


run_quality_checks = DataQualityOperator(
    task_id='Run_data_quality_checks',
    dag=dag,
    redshift_conn_id='redshift',
    dq_checks=dq_checks
)


end_operator = DummyOperator(task_id='Stop_execution',  dag=dag)


# Defining the Task Dependencies
start_operator >> stage_events_to_redshift >> load_songplays_table
start_operator >> stage_songs_to_redshift >> load_songplays_table

load_songplays_table >> load_user_dimension_table
load_songplays_table >> load_song_dimension_table
load_songplays_table >> load_artist_dimension_table
load_songplays_table >> load_time_dimension_table

load_user_dimension_table >> run_quality_checks
load_song_dimension_table >> run_quality_checks
load_artist_dimension_table >> run_quality_checks
load_time_dimension_table >> run_quality_checks

run_quality_checks >> end_operator
